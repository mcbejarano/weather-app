{"version":3,"sources":["services/getUrlWeatherByCity.js","constants/api_url.js","services/transformWeather.js","constants/weathers.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","components/LocationList.js","App.js","serviceWorker.js","index.js"],"names":["getUrlWeatherByCity","city","concat","transformWeather","weather_data","kelvin","_weather_data$main","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","Location","_ref","react_default","a","createElement","className","WeatherExtraInfo","icons","_icons","Object","defineProperty","WeatherTemperature","icon","react_weathericons_lib_default","name","size","getWeatherIcon","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdateClick","api_weather","state","fetch","then","resolve","json","newWeather","console","log","setState","onWeatherLocationClick","_this$state","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress","Component","LocationList","cities","onSelectedLocation","map","components_WeatherLocation","key","handleWeatherLocationClick","strToComponent","App","handleSelectedLocationClick","components_LocationList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAMeA,EAJa,SAAAC,GACxB,SAAAC,OCF4B,iDDE5B,OAAAA,OAAgCD,EAAhC,WAAAC,OCHmB,sDC6CRC,EAdU,SAAAC,GAAgB,IArBzBC,EAqByBC,EACdF,EAAaG,KAA/BC,EADgCF,EAChCE,SAAUC,EADsBH,EACtBG,KACVC,EAASN,EAAaO,KAAtBD,MACDE,EApBgB,SAAAC,GAAW,IACzBC,EAAMD,EAANC,GACR,OAAIA,EAAK,ICZY,UDcVA,EAAK,ICbK,UDeVA,EAAK,IClBE,ODoBPA,EAAK,ICnBE,ODqBA,MAAPA,ECvBM,MADE,QDkCEC,CAAgBX,EAAaS,QAAQ,IAQ1D,MANa,CACTL,WACAQ,aA5BUX,EAyBcI,EAxBrBQ,OAAOC,IAAQb,GAAQc,KAAK,KAAKC,GAAG,KAAKC,QAAQ,KA4BpDT,eACAD,KAAI,GAAAT,OAAIQ,EAAJ,UExBKY,SAZE,SAAAC,GAAA,IAAEtB,EAAFsB,EAAEtB,KAAF,OACbuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UACGzB,MCSM2B,SAZU,SAAAL,GAAA,IAAEf,EAAFe,EAAEf,SAAUG,EAAZY,EAAYZ,KAAZ,OACvBa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAhB,YAAAzB,OAA6CM,EAA7C,MACAgB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAhB,YAAAzB,OAA6CS,+BCM3CkB,GAAKC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EHbU,QGcV,SADAC,OAAAC,EAAA,EAAAD,CAAAD,EHZQ,MGcV,aAFEC,OAAAC,EAAA,EAAAD,CAAAD,EHXS,OGcV,QAHCC,OAAAC,EAAA,EAAAD,CAAAD,EHVS,OGcV,QAJCC,OAAAC,EAAA,EAAAD,CAAAD,EHTY,UGcV,oBALFC,OAAAC,EAAA,EAAAD,CAAAD,EHRY,UGcV,eANFA,GAiCIG,EAfY,SAAAV,GAAA,IAAEP,EAAFO,EAAEP,YAAaJ,EAAfW,EAAeX,aAAf,OACzBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAVM,SAAAf,GACrB,IACMsB,EAAML,EAAMjB,GAClB,OAAIsB,EACOV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcW,KAAMF,EAAMP,UAAU,QAAQU,KAHxC,OAKJb,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcW,KAAM,WAAYT,UAAU,QAAQU,KAL9C,OAWXC,CAAe1B,GAEjBY,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,IAAAzB,OAAmCc,GAAnC,KACAQ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,gBCZWY,EAnBK,SAAAhB,GAAA,IAAAiB,EAAAjB,EAAEkB,KAAOzB,EAATwB,EAASxB,YAAaJ,EAAtB4B,EAAsB5B,aAAcJ,EAApCgC,EAAoChC,SAAUG,EAA9C6B,EAA8C7B,KAA9C,OAClBa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACgB,EAAD,CACE1B,YAAaA,EACbJ,aAAcA,IAEhBY,EAAAC,EAAAC,cAACiB,EAAD,CAAkBnC,SAAUA,EAAUG,KAAMA,MCyCjCiC,cA3Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAJ,IACjBE,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAa,GAAAO,KAAAH,KAAMH,KAWRO,kBAAoB,WAClB,IAAMC,EAAcrD,EAAoB8C,EAAKQ,MAAMrD,MACnDsD,MAAMF,GAAaG,KAAM,SAAAC,GACvB,OAAOA,EAAQC,SACdF,KAAM,SAAAf,GACP,IAAMkB,EAAaxD,EAAiBsC,GACpCmB,QAAQC,IAAIF,GAEZb,EAAKgB,SAAS,CACZrB,KAAKkB,OArBQ,IAET1D,EAAS4C,EAAT5C,KAFS,OAGjB6C,EAAKQ,MAAQ,CACXrD,OACAwC,KAAM,MALSK,mFASjBE,KAAKI,qDAgBE,IACCW,EAA2Bf,KAAKH,MAAhCkB,uBADDC,EAEgBhB,KAAKM,MAApBrD,EAFD+D,EAEC/D,KAAMwC,EAFPuB,EAEOvB,KACd,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBsC,QAASF,GAC5CvC,EAAAC,EAAAC,cAACwC,EAAD,CAAUjE,KAAMA,IACdwC,EACEjB,EAAAC,EAAAC,cAACyC,EAAD,CAAa1B,KAAMA,IACnBjB,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,cAlCkBC,aCsBfC,EA3BM,SAAA/C,GAAoC,IAAjCgD,EAAiChD,EAAjCgD,OAAQC,EAAyBjD,EAAzBiD,mBAiB5B,OAAQhD,EAAAC,EAAAC,cAAA,WAXe,SAAA6C,GAAM,OACzBA,EAAOE,IAAK,SAAAxE,GAAI,OAERuB,EAAAC,EAAAC,cAACgD,EAAD,CACIC,IAAK1E,EACLA,KAAMA,EACN8D,uBAAyB,kBAXN,SAAA9D,GAC/B2D,QAAQC,IAAK,8BACbW,EAAmBvE,GASwB2E,CAA2B3E,QAMtE4E,CAAeN,KCjBjBA,SAAS,CACb,gBACA,UACA,aACA,YACA,WACA,iBAoBaO,6MAfbC,4BAA8B,SAAA9E,GAC5B2D,QAAQC,IAAR,+BAAA3D,OAA2CD,6EAG3C,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsD,EAAD,CACET,OAAQA,EACRC,mBAAoBxB,KAAK+B,sCAVjBV,aCFEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.7fde37bc.chunk.js","sourcesContent":["import { url_base_weather,api_key } from './../constants/api_url';\n\nconst getUrlWeatherByCity = city => {\n    return `${url_base_weather}?q=${city}&appid=${api_key}`;\n}\n\nexport default getUrlWeatherByCity;","export const api_key = \"1102837a6152ed4ba277725fb88956ec\";\nexport const url_base_weather = \"http://api.openweathermap.org/data/2.5/weather\";\n\n","import convert from 'convert-units';\nimport {\n  CLOUD,\n  SUN,\n  RAIN,\n  SNOW,\n  THUNDER,\n  DRIZZLE,\n} from './../constants/weathers';\n\nconst getTemp = kelvin => {\n  return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(2));\n}\n\nconst getWeatherState = weather => {\n  const { id }= weather;\n  if (id < 300) {\n    return THUNDER;\n  } else if (id < 400) {\n    return DRIZZLE;\n  } else if (id < 600) {\n    return RAIN;\n  } else if (id < 700) {\n    return SNOW;\n  } else if (id === 800) {\n    return SUN;\n  } else {\n    return CLOUD;\n  }\n}\n\nconst transformWeather = weather_data => {\n  const {humidity, temp} = weather_data.main;\n  const {speed} = weather_data.wind;\n  const weatherState = getWeatherState(weather_data.weather[0]);\n  const temperature = getTemp(temp);\n  const data = {\n      humidity,\n      temperature,\n      weatherState,\n      wind:`${speed} m/s`,\n  }\n  return data;\n}\n\nexport default transformWeather;\n","export const CLOUD = \"cloud\";\nexport const SUN = \"sun\";\nexport const RAIN = \"rain\";\nexport const SNOW = \"snow\";\nexport const THUNDER = \"thunder\";\nexport const DRIZZLE = \"drizzle\";\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst Location = ({city}) => (\n    <div className=\"locationCont\">\n      <h1>\n        {city}\n      </h1>\n    </div>\n  );\n\nLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n};\n\nexport default Location;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst WeatherExtraInfo = ({humidity, wind}) => (\n  <div className=\"weatherExtraInfoCont\">\n    <span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\n    <span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\n  </div>\n);\n\nWeatherExtraInfo.propTypes = {\n  humidity: PropTypes.number.isRequired,\n  wind: PropTypes.string.isRequired,\n};\n\nexport default WeatherExtraInfo;\n","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport PropTypes from 'prop-types';\nimport './style.css';\nimport {\n  CLOUD,\n  SUN,\n  RAIN,\n  SNOW,\n  THUNDER,\n  DRIZZLE,\n} from './../../../constants/weathers';\n\nconst icons = {\n  [CLOUD]: \"cloud\",\n  [SUN]: \"day-sunny\",\n  [RAIN]: \"rain\",\n  [SNOW]: \"snow\",\n  [THUNDER]: \"day-thunderstore\",\n  [DRIZZLE]: \"day-showers\",\n};\n\nconst getWeatherIcon = weatherState => {\n  const sizeIcon=\"4x\";\n  const icon= icons[weatherState];\n  if (icon)\n      return <WeatherIcons name={icon} className=\"wicon\" size={sizeIcon}/>;\n  else\n      return <WeatherIcons name={\"day-rain\"} className=\"wicon\" size={sizeIcon}/>;\n};\n\nconst WeatherTemperature = ({temperature, weatherState}) => (\n  <div className=\"weatherTemperatureCont\">\n    {\n      getWeatherIcon(weatherState)\n    }\n    <span className=\"temperature\">{` ${temperature}`} </span>\n    <span className=\"temperatureType\">{` CÂ°`} </span>\n  </div>\n);\n\nWeatherTemperature.propTypes = {\n  temperature: PropTypes.number.isRequired,\n  weatherState: PropTypes.string.isRequired,\n};\n\nexport default WeatherTemperature;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherExtraInfo from './WeatherExtraInfo';\nimport WeatherTemperature from './WeatherTemperature';\nimport './style.css';\n\nconst WeatherData = ({data:{ temperature, weatherState, humidity, wind }}) => (\n  <div className=\"weatherDataCont\">\n    <WeatherTemperature\n      temperature={temperature}\n      weatherState={weatherState}\n    />\n    <WeatherExtraInfo humidity={humidity} wind={wind}/>\n  </div>\n);\n\nWeatherData.propTypes = {\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n  }),\n};\n\nexport default WeatherData;\n","import React, {Component} from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { PropTypes } from 'prop-types';\nimport getUrlWeatherByCity from './../../services/getUrlWeatherByCity';\nimport transformWeather from './../../services/transformWeather';\nimport Location from './Location';\nimport WeatherData from './WeatherData';\nimport './style.css';\n\nclass WeatherLocation extends Component {\n  constructor(props) {\n    super(props);\n    const { city } = props;\n    this.state = {\n      city,\n      data: null,\n    };\n  }\n  componentDidMount() {\n    this.handleUpdateClick();\n  }\n\n  handleUpdateClick = () => {\n    const api_weather = getUrlWeatherByCity(this.state.city);\n    fetch(api_weather).then( resolve => {\n      return resolve.json();\n    }).then( data => {\n      const newWeather = transformWeather(data);\n      console.log(newWeather);\n      //debugger;\n      this.setState({\n        data:newWeather,\n      });\n    });\n  }\n  render() {\n    const { onWeatherLocationClick } = this.props;\n    const { city, data } = this.state;\n    return (\n      <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\n        <Location city={city}></Location>\n        { data ?\n            <WeatherData data={data}></WeatherData> :\n            <CircularProgress />\n        }\n      </div>\n    );\n  }\n};\nWeatherLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n  onWeatherLocationClick: PropTypes.func,\n}\nexport default WeatherLocation;\n","import React from 'react';\nimport WeatherLocation from './WeatherLocation';\nimport PropTypes from 'prop-types';\n\nconst LocationList = ({ cities, onSelectedLocation }) => {\n    const handleWeatherLocationClick = city => {\n        console.log (\"handleWeatherLocationClick\");\n        onSelectedLocation(city);\n    }\n\n    const strToComponent = cities => (        \n        cities.map( city => \n                (\n                <WeatherLocation \n                    key={city} \n                    city={city}\n                    onWeatherLocationClick={ () => handleWeatherLocationClick(city)}\n                /> )\n            )\n    ); \n\n    return (<div>\n       {strToComponent(cities)}\n    </div>);\n};\n\nLocationList.propTypes = {\n    cities: PropTypes.array.isRequired,\n    onSelectedLocation: PropTypes.func,\n}\n\nexport default LocationList;","import React from 'react';\nimport { Component } from 'react';\nimport LocationList from './components/LocationList'\nimport './App.css';\n\nconst cities = [\n  \"Corrientes,ar\",\n  \"Lima,pe\",\n  \"Sevilla,es\",\n  \"London,uk\",\n  \"Texas,us\",\n  \"Humahuaca,ar\",\n];\n\nclass App extends Component {\n\n  handleSelectedLocationClick = city => {\n    console.log(`handleSelectedLocationClick ${city}`);\n  };  \n  render(){\n    return (\n      <div className=\"App\">\n        <LocationList \n          cities={cities} \n          onSelectedLocation={this.handleSelectedLocationClick} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}